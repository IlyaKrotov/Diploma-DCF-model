//
// Generated file, do not edit! Created by nedtool 5.0 from messages.msg.
//

#ifndef __MESSAGES_M_H
#define __MESSAGES_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>messages.msg:1</tt> by nedtool.
 * <pre>
 * enum FrameKinds
 * {
 * 
 *     KIND_DATA = 100;
 *     KIND_ACK = 101;
 * }
 * </pre>
 */
enum FrameKinds {
    KIND_DATA = 100,
    KIND_ACK = 101
};

/**
 * Class generated from <tt>messages.msg:5</tt> by nedtool.
 * <pre>
 * packet Frame
 * {
 *     simtime_t frameDuration;
 * }
 * </pre>
 */
class Frame : public ::omnetpp::cPacket
{
  protected:
    ::omnetpp::simtime_t frameDuration;

  private:
    void copy(const Frame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Frame&);

  public:
    Frame(const char *name=nullptr, int kind=0);
    Frame(const Frame& other);
    virtual ~Frame();
    Frame& operator=(const Frame& other);
    virtual Frame *dup() const {return new Frame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual ::omnetpp::simtime_t getFrameDuration() const;
    virtual void setFrameDuration(::omnetpp::simtime_t frameDuration);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Frame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Frame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>messages.msg:8</tt> by nedtool.
 * <pre>
 * packet DataFrame extends Frame
 * {
 *     kind = KIND_DATA;
 * }
 * </pre>
 */
class DataFrame : public ::Frame
{
  protected:

  private:
    void copy(const DataFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DataFrame&);

  public:
    DataFrame(const char *name=nullptr, int kind=0);
    DataFrame(const DataFrame& other);
    virtual ~DataFrame();
    DataFrame& operator=(const DataFrame& other);
    virtual DataFrame *dup() const {return new DataFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DataFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DataFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>messages.msg:11</tt> by nedtool.
 * <pre>
 * packet AckFrame extends Frame
 * {
 *     kind = KIND_ACK;
 * }
 * </pre>
 */
class AckFrame : public ::Frame
{
  protected:

  private:
    void copy(const AckFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AckFrame&);

  public:
    AckFrame(const char *name=nullptr, int kind=0);
    AckFrame(const AckFrame& other);
    virtual ~AckFrame();
    AckFrame& operator=(const AckFrame& other);
    virtual AckFrame *dup() const {return new AckFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AckFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AckFrame& obj) {obj.parsimUnpack(b);}


#endif // ifndef __MESSAGES_M_H

